{"version":3,"sources":["data/data.js","components/Header.jsx","App.js","serviceWorker.js","index.js","images/profilepic.png","images/email_white.svg","images/phone_white.svg","images/linkedin_white.svg","images/download_white.svg","data/VAEM.pdf"],"names":["data","name","title","email","cel","linkedin","Header","className","Container","Grid","verticalAlign","Column","width","src","profilepic","alt","textAlign","href","email_icon","phone_icon","target","rel","linkedin_icon","CV","download_icon","App","info","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"sIAAaA,G,MAAO,CAClB,CACEC,KAAM,uCACNC,MAAO,mDACPC,MAAO,kCACPC,IAAK,aACLC,SAAU,iD,wHCoDCC,EAjDA,SAAC,GAA2C,IAAzCL,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SAEzC,OACE,yBAAKE,UAAU,gBACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,cAAc,SAASH,UAAU,YACrC,kBAACE,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,yBAAKC,IAAKC,IAAYP,UAAU,gBAAgBQ,IAAI,aAEtD,kBAACN,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAII,UAAU,UAChC,wBAAIT,UAAU,SACZ,wBAAIA,UAAU,SACZ,4BAAKN,IAEP,wBAAIM,UAAU,SACZ,4BAAKL,MAIX,kBAACO,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,wBAAIL,UAAU,SACZ,wBAAIA,UAAU,SACZ,uBAAGU,KAAI,iBAAYd,IACjB,yBAAKU,IAAKK,IAAYX,UAAU,QAAQL,MAAOC,EAAOY,IAAI,iBAG9D,wBAAIR,UAAU,SACZ,uBAAGU,KAAI,iBAAYb,IACjB,yBAAKS,IAAKM,IAAYZ,UAAU,QAAQL,MAAOE,EAAKW,IAAI,iBAG5D,wBAAIR,UAAU,SACZ,uBAAGU,KAAMZ,EAAUe,OAAO,SAASC,IAAI,uBACrC,yBAAKR,IAAKS,IAAef,UAAU,QAAQL,MAAK,UAAKG,GAAYU,IAAI,oBAGzE,wBAAIR,UAAU,SACZ,uBAAGU,KAAMM,IAAIH,OAAO,UAClB,yBAAKP,IAAKW,IAAejB,UAAU,QAAQQ,IAAI,gBAAgBb,MAAM,+BCzBxEuB,MAjBf,WACE,IAAMC,EAAO1B,EAAK,GAClB,OACE,6BACE,kBAAC,EAAD,CACEC,KAAMyB,EAAKzB,KACXC,MAAOwB,EAAKxB,MACZC,MAAOuB,EAAKvB,MACZC,IAAKsB,EAAKtB,IACVC,SAAUqB,EAAKrB,WANnB,6BCIgBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.e4e7082d.chunk.js","sourcesContent":["export const data = [\n  {\n    name: \"Vania Alejandra Elizondo Martínez\",\n    title: \"Digital Systems and Robotics Engineering Student\",\n    email: \"vaniaelizondomartinez@gmail.com\",\n    cel: \"8110295364\",\n    linkedin: \"https://www.linkedin.com/in/vania-elizondo/\"\n  }\n];\n","import React from \"react\";\nimport profilepic from \"../images/profilepic.png\";\nimport email_icon from \"../images/email_white.svg\";\nimport phone_icon from \"../images/phone_white.svg\";\nimport linkedin_icon from \"../images/linkedin_white.svg\";\nimport download_icon from \"../images/download_white.svg\";\nimport CV from \"../data/VAEM.pdf\";\nimport { Grid, Container } from \"semantic-ui-react\";\n\nconst Header = ({ name, title, email, cel, linkedin }) => {\n\n  return (\n    <div className=\"header-block\">\n      <Container>\n        <Grid verticalAlign='middle' className='grid-bar' >\n          <Grid.Column width={3} >\n            <img src={profilepic} className=\"image-profile\" alt='Profile' />\n          </Grid.Column>\n          <Grid.Column width={10} textAlign='center'>\n            <ul className=\"title\">\n              <li className=\"title\">\n                <h1>{name}</h1>\n              </li>\n              <li className=\"title\">\n                <h2>{title}</h2>\n              </li>\n            </ul>\n          </Grid.Column>\n          <Grid.Column width={1} >\n            <ul className=\"icons\">\n              <li className=\"icons\" >\n                <a href={`mailto:${email}`}>\n                  <img src={email_icon} className=\"icons\" title={email} alt='Email Icon' />\n                </a>\n              </li>\n              <li className=\"icons\" >\n                <a href={`callto:${cel}`}>\n                  <img src={phone_icon} className=\"icons\" title={cel} alt='Phone Icon' />\n                </a>\n              </li>\n              <li className=\"icons\" >\n                <a href={linkedin} target=\"_blank\" rel=\"noopener noreferrer\" >\n                  <img src={linkedin_icon} className=\"icons\" title={`${linkedin}`} alt='Linkedin Icon' />\n                </a>\n              </li>\n              <li className=\"icons\" >\n                <a href={CV} target='_blank'>\n                  <img src={download_icon} className=\"icons\" alt='Download Icon' title='Download CV in PDF' />\n                </a>\n              </li>\n            </ul>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport './styles/App.css';\nimport { data } from './data/data';\nimport Header from './components/Header';\n\nfunction App() {\n  const info = data[0]\n  return (\n    <div>\n      <Header \n        name={info.name}\n        title={info.title}\n        email={info.email}\n        cel={info.cel}\n        linkedin={info.linkedin}\n      />\n      Educación\n      Experiencia\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profilepic.80f94028.png\";","module.exports = __webpack_public_path__ + \"static/media/email_white.a665ac1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/phone_white.6e350343.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin_white.4b9d6707.svg\";","module.exports = __webpack_public_path__ + \"static/media/download_white.ddc49fee.svg\";","module.exports = __webpack_public_path__ + \"static/media/VAEM.f155d2bc.pdf\";"],"sourceRoot":""}